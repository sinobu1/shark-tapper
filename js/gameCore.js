// js/gameCore.js
import { eventBus } from "./eventBus.js";
import { config } from "./config.js";
import { formatNumber } from "./utils.js"; // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import { shopManager } from "./shopManager.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ShopManager

class GameCore {
  constructor() {
    this.passiveIncomeInterval = null;
    this.energyRegenInterval = null;
    this.boostCheckInterval = null; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É—Å—Ç–∞
    this.setupEventHandlers();
    this.startGameLoops();
    this.initTelegramUser();
    console.log("GameCore initialized");
  }

  initTelegramUser() {
    try {
      if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        const user = tg.initDataUnsafe?.user;
        if (user) {
          console.log("Telegram user data:", user);
          eventBus.emit("user:info_updated", {
            name: user.first_name || user.username || "–ò–≥—Ä–æ–∫",
            photoUrl: user.photo_url || null,
          });
        } else {
          console.warn("Telegram user data not available.");
          eventBus.emit("user:info_updated", { name: "–ì–æ—Å—Ç—å", photoUrl: null });
        }
      } else {
        console.warn("Telegram WebApp API not found.");
        eventBus.emit("user:info_updated", { name: "–ì–æ—Å—Ç—å", photoUrl: null });
      }
    } catch (e) {
      console.error("Error initializing Telegram User:", e);
      eventBus.emit("user:info_updated", { name: "–ì–æ—Å—Ç—å", photoUrl: null });
    }
  }

  handleTap(event) {
    const state = eventBus.emitSync("state:get");
    if (!state) return;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏
    if (state.energy.current < config.game.energyCostPerTap) {
      eventBus.emit("ui:notification_show", {
        type: "error",
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!",
      });
      this.triggerHapticFeedback("error");
      return;
    }
    // –°–Ω–∏–º–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
    eventBus.emit("energy:remove", { amount: config.game.energyCostPerTap });
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç–∞–ø–∞
    let tapValue = state.derived.currentTapValue; // –£–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∞–ø–≥—Ä–µ–π–¥—ã –∏ —Å–∫–∏–Ω
    let isCritical = Math.random() < state.derived.criticalChance;
    if (isCritical) {
      tapValue = Math.floor(tapValue * config.game.criticalMultiplier);
    }
    if (state.boost.active) {
      tapValue = Math.floor(tapValue * config.game.boostMultiplier);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    eventBus.emit("currency:add", { type: "coin", amount: tapValue });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç (+–º–æ–Ω–µ—Ç—ã –∏–ª–∏ –∫—Ä–∏—Ç)
    if (isCritical) {
      eventBus.emit("effect:show_tap", {
        type: "critical",
        event,
        text: "–ö–†–ò–¢!",
      });
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –ø–æ–∫–∞–∑ –º–æ–Ω–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–æ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      eventBus.emit("effect:show_tap", {
        type: "coin",
        event,
        text: `+${formatNumber(tapValue)}`,
      });
    } else {
      eventBus.emit("effect:show_tap", {
        type: "coin",
        event,
        text: `+${formatNumber(tapValue)}`,
      });
    }
    // –®–∞–Ω—Å –Ω–∞ –≥–µ–º –∏ —Ä—É–¥—É
    const dropRandom = Math.random();
    let droppedItem = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ –¥—Ä—É–≥–æ–µ
    if (dropRandom < config.game.gemChanceOnTap) {
      // –®–∞–Ω—Å –≥–µ–º–∞
      eventBus.emit("currency:add", { type: "gem", amount: 1 });
      eventBus.emit("effect:show_tap", {
        type: "gem",
        event,
        text: "+1 –ì–µ–ºüíé",
      });
      droppedItem = true;
    } else if (dropRandom < state.derived.oreChance) {
      // –®–∞–Ω—Å —Ä—É–¥—ã (—É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∞–ø–≥—Ä–µ–π–∑—ã)
      eventBus.emit("currency:add", { type: "ore", amount: 1 });
      eventBus.emit("effect:show_tap", { type: "ore", event, text: "+1 –†—É–¥–∞" });
      droppedItem = true;
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–ø–æ–≤ –∏ –ø—Ä–æ—á–µ–µ (StateManager —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ)
    eventBus.emit("game:tap_processed", { tapValue, isCritical });
    // –í–∏–±—Ä–∞—Ü–∏—è
    this.triggerHapticFeedback("light");
  }

  handleTapProcessed({ tapValue, isCritical }) {
    const state = eventBus.emitSync("state:get");
    if (!state) return;
    const currentLevel = state.player.level;
    const currentProgress = state.player.progress;
    const neededProgress = state.player.progressToNextLevel;
    const newProgressRaw = currentProgress + 1; // +1 –∑–∞ —Ç–∞–ø
    if (newProgressRaw >= neededProgress) {
      // --- Level Up ---
      const newLevel = currentLevel + 1;
      const newProgress = newProgressRaw - neededProgress; // –û—Å—Ç–∞—Ç–æ–∫ –æ–ø—ã—Ç–∞
      const newProgressToNextLevel = Math.max(
        config.game.baseProgressToNextLevel,
        Math.floor(neededProgress * config.game.progressToNextLevelMultiplier)
      );
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ª–µ–≤–µ–ª–∞–ø–µ
      eventBus.emit("game:level_up", {
        newLevel,
        newProgress,
        newProgressToNextLevel,
      });
      // UI –ø–æ–∫–∞–∂–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      eventBus.emit("ui:show_level_up", { newLevel });
      // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ª–µ–≤–µ–ª–∞–ø–µ
      this.triggerHapticFeedback("medium");
    } else {
      // --- –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è StateManager, —á—Ç–æ–±—ã –æ–Ω –æ–±–Ω–æ–≤–∏–ª —Ç–æ–ª—å–∫–æ progress
      eventBus.emit("game:progress_update", { newProgress: newProgressRaw });
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–ª-–≤–æ —Ç–∞–ø–æ–≤, –∫—Ä–∏—Ç—ã) - —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –µ—Å—Ç—å
    eventBus.emit("game:tap_stats_update", { isCritical });
  }

  setupEventHandlers() {
    // –ó–∞–ø—Ä–æ—Å—ã –æ—Ç UI
    eventBus.on("game:tap_request", ({ event }) => this.handleTap(event));
    eventBus.on("game:boost_request", () => this.activateBoost());

    // –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —Ç–∞–ø–∞
    eventBus.on("game:tap_processed", (data) => this.handleTapProcessed(data));

    // –ó–∞–ø—Ä–æ—Å—ã –æ—Ç –ú–∞–≥–∞–∑–∏–Ω–∞ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ ShopManager)
    eventBus.on("shop:buy_helper_request", ({ helperId }) => {
      shopManager.buyHelper(helperId);
    });
    eventBus.on("shop:buy_upgrade_request", ({ upgradeId }) => {
      shopManager.buyUpgrade(upgradeId);
    });
    eventBus.on("shop:handle_skin_request", ({ skinId }) => {
      shopManager.handleSkin(skinId);
    });
    eventBus.on("shop:open_lootbox_request", ({ lootboxType }) => {
      shopManager.openLootbox(lootboxType);
    });
  }

  activateBoost() {
    const state = eventBus.emitSync("state:get");
    if (!state || state.boost.active) return; // –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
    const cost = config.game.boostCostGems;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–º—ã
    const success = eventBus.emitSync("currency:remove", {
      type: "gem",
      amount: cost,
    });
    if (success) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º StateManager
      eventBus.emit("game:boost_activated");
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
      eventBus.emit("effect:show_boost", {
        duration: config.game.boostDuration,
      });
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      eventBus.emit("ui:notification_show", {
        type: "success",
        message: "–ë—É—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
      });
      this.triggerHapticFeedback("medium");
    } else {
      eventBus.emit("ui:notification_show", {
        type: "error",
        message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤!",
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –±—É—Å—Ç–∞
  checkBoostEnd() {
    const state = eventBus.emitSync("state:get");
    if (state && state.boost.active && Date.now() >= state.boost.endTime) {
      eventBus.emit("game:boost_deactivated");
      console.log("Boost deactivated");
    }
  }

  startGameLoops() {
    // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
    this.passiveIncomeInterval = setInterval(() => {
      const state = eventBus.emitSync("state:get");
      if (state && state.derived.passiveIncomePerSec > 0) {
        eventBus.emit("currency:add", {
          type: "coin",
          amount: state.derived.passiveIncomePerSec,
        });
      }
    }, 1000);
    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
    this.energyRegenInterval = setInterval(() => {
      const state = eventBus.emitSync("state:get");
      if (state && state.energy.current < state.energy.max) {
        eventBus.emit("energy:add", { amount: state.energy.regenRate });
      }
    }, 1000);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É—Å—Ç–∞
    this.boostCheckInterval = setInterval(() => this.checkBoostEnd(), 1000);
  }

  stopGameLoops() {
    clearInterval(this.passiveIncomeInterval);
    clearInterval(this.energyRegenInterval);
    clearInterval(this.boostCheckInterval);
  }

  triggerHapticFeedback(style = "light") {
    try {
      if (window.Telegram?.WebApp?.HapticFeedback?.impactOccurred) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred(style); // 'light', 'medium', 'heavy', 'rigid', 'soft'
      } else if (
        window.Telegram?.WebApp?.HapticFeedback?.notificationOccurred &&
        (style === "success" || style === "warning" || style === "error")
      ) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred(style);
      }
    } catch (e) {
      // console.warn("Haptic feedback failed:", e);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const gameCore = new GameCore();
