// === map.js (—Ä–∞–±–æ—á–∏–π –∏ —á–∏—Å—Ç—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) ===
import { eventBus } from './eventBus.js';
import { stateManager } from './stateManager.js';

export const games = {
    main: {
        title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞',
        description: '–¢–∞–ø–∞–π—Ç–µ –ø–æ –∞–∫—É–ª–µ, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/coin.png" alt="–º–æ–Ω–µ—Ç—ã" width="16"/> –º–æ–Ω–µ—Ç—ã, <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/dimond.png" alt="–≥–µ–º—ã" width="16"/> –≥–µ–º—ã –∏ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/ruda.png" alt="—Ä—É–¥–∞" width="16"/> —Ä—É–¥—É.',
        rewards: [ { type: 'coin', min: 1, max: 10 }, { type: 'gem', min: 0, max: 1 }, { type: 'ore', min: 0, max: 1 } ],
        minLevel: 1,
        energyCost: 1,
        redirect: 'index.html'
    },
    fishing: {
        title: '–†—ã–±–∞–ª–∫–∞',
        description: '–õ–æ–≤–∏—Ç–µ —Ä—ã–±—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/coin.png" width="16"/> –º–æ–Ω–µ—Ç—ã –∏ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/dimond.png" width="16"/> –≥–µ–º—ã.',
        rewards: [ { type: 'coin', min: 10, max: 100 }, { type: 'gem', min: 1, max: 3 }, { type: 'special', text: '–†–µ–¥–∫–∞—è —Ä—ã–±–∞' } ],
        minLevel: 5,
        energyCost: 5
    },
    mining: {
        title: '–î–æ–±—ã—á–∞ —Ä—É–¥—ã',
        description: '–î–æ–±—ã–≤–∞–π—Ç–µ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/ruda.png" width="16"/> —Ä—É–¥—É –∏ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/dimond.png" width="16"/> –≥–µ–º—ã.',
        rewards: [ { type: 'ore', min: 5, max: 20 }, { type: 'gem', min: 2, max: 5 }, { type: 'special', text: '–†–µ–¥–∫–∏–µ –º–∏–Ω–µ—Ä–∞–ª—ã' } ],
        minLevel: 10,
        energyCost: 10
    },
    treasure: {
        title: '–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
        description: '–ò—â–∏—Ç–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –¥–ª—è <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/dimond.png" width="16"/> –≥–µ–º–æ–≤ –∏ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/coin.png" width="16"/> –º–æ–Ω–µ—Ç.',
        rewards: [ { type: 'gem', min: 5, max: 15 }, { type: 'coin', min: 50, max: 200 }, { type: 'special', text: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã' } ],
        minLevel: 15,
        energyCost: 15
    },
    racing: {
        title: '–ì–æ–Ω–∫–∏ –∞–∫—É–ª',
        description: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≥–æ–Ω–∫–∞—Ö –∑–∞ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/coin.png" width="16"/> –º–æ–Ω–µ—Ç—ã, <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/dimond.png" width="16"/> –≥–µ–º—ã –∏ <img src="https://raw.githubusercontent.com/sinobu1/shark-tapper/main/ruda.png" width="16"/> —Ä—É–¥—É.',
        rewards: [ { type: 'coin', min: 100, max: 500 }, { type: 'gem', min: 10, max: 30 }, { type: 'ore', min: 20, max: 50 }, { type: 'special', text: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã' } ],
        minLevel: 20,
        energyCost: 20
    }
};

export function startGame(gameType) {
    const game = games[gameType];
    if (!game) return console.warn(`–ò–≥—Ä–∞ ${gameType} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);

    if (game.redirect) {
        window.location.href = game.redirect;
        return;
    }

    const state = stateManager.getState();
    if (!state) return console.error('‚ùå StateManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');

    if (state.player.level < game.minLevel) {
        eventBus.emit('ui:notification_show', { type: 'error', message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${game.minLevel}` });
        return;
    }

    if (state.energy.current < game.energyCost) {
        eventBus.emit('ui:notification_show', { type: 'error', message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${game.energyCost}` });
        return;
    }

    eventBus.emit('energy:remove', { amount: game.energyCost });

    game.rewards.forEach(reward => {
        if (reward.type === 'special') {
            console.log(`–ü–æ–ª—É—á–µ–Ω —Å–ø–µ—Ü–ø—Ä–∏–∑: ${reward.text}`);
        } else {
            const amount = Math.floor(Math.random() * (reward.max - reward.min + 1)) + reward.min;
            eventBus.emit('currency:add', { type: reward.type, amount });
            console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} ${reward.type}`);
        }
    });

    eventBus.emit('ui:notification_show', { type: 'success', message: `${game.title} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–≥—Ä–∞–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.` });
}

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.game-location').forEach(btn => {
        btn.addEventListener('click', () => {
            const gameType = btn.dataset.type;
            showGameInfo(gameType);
        });
    });
});

export function showGameInfo(gameType) {
    const game = games[gameType];
    if (!game) return;

    const gameTitleElement = document.getElementById('game-title');
    const gameDescriptionElement = document.getElementById('game-description');
    const gameRequirementsElement = document.getElementById('game-requirements');
    const gameRewardsElement = document.getElementById('game-rewards');
    const gameInfoCard = document.getElementById('game-info');
    const startGameBtn = document.getElementById('start-game-btn');

    if (!gameTitleElement) return console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç—ã.');

    gameTitleElement.textContent = game.title;
    gameDescriptionElement.innerHTML = game.description;
    gameRequirementsElement.textContent = `–¢—Ä–µ–±—É–µ—Ç—Å—è ${game.minLevel} —É—Ä–æ–≤–µ–Ω—å | –≠–Ω–µ—Ä–≥–∏—è: ${game.energyCost}`;
    gameRewardsElement.innerHTML = '';

    game.rewards.forEach(reward => {
        const rewardItem = document.createElement('div');
        rewardItem.className = 'reward-item';
        if (reward.type === 'special') {
            rewardItem.innerHTML = `<i class="fas fa-star"></i> ${reward.text}`;
        } else {
            const icon = reward.type === 'coin' ? 'üí∞' : reward.type === 'gem' ? 'üíé' : reward.type === 'ore' ? '‚õèÔ∏è' : 'üéÅ';
            rewardItem.innerHTML = `${icon} ${reward.min}-${reward.max} ${reward.type}`;
        }
        gameRewardsElement.appendChild(rewardItem);
    });

    startGameBtn.innerHTML = '<i class="fas fa-play mr-2"></i> –ù–∞—á–∞—Ç—å –∏–≥—Ä—É';
    startGameBtn.onclick = () => {
        startGame(gameType);
        gameInfoCard.classList.remove('show');
    };

    gameInfoCard.classList.add('show');
}

if (typeof window !== 'undefined') {
    window.showGameInfo = showGameInfo;
}
