
const skinsData = {
    ww: { name: "–û–±—ã—á–Ω–∞—è –∞–∫—É–ª–∞", image: "ww.png" },
    ww2: { name: "–ó–æ–ª–æ—Ç–∞—è –∞–∫—É–ª–∞", image: "ww2.png" },
    ww3: { name: "–õ–µ–æ–ø–∞—Ä–¥–æ–≤–∞—è –∞–∫—É–ª–∞", image: "ww3.png" }
};



function triggerVibration() {
    if ("vibrate" in navigator) {
        navigator.vibrate(50);
    }
}


function feedback() {
            // 1. –í–∏–±—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            if ('vibrate' in navigator) {
                navigator.vibrate([30]);
            }

            // 2. –ó–≤—É–∫ —Ç–∞–ø–∞
            try {
                const tapSound = new Audio("https://assets.mixkit.co/sfx/preview/mixkit-arcade-game-jump-coin-216.wav");
                tapSound.volume = 0.2;
                tapSound.play().catch(() => {}); // –ë–µ–∑ –æ—à–∏–±–∫–∏ –Ω–∞ –∞–≤—Ç–æ-play
            } catch (e) {
                console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:", e);
            }

            // 3. –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è "scale"
            const shark = document.getElementById("tapImage");
            if (shark) {
                shark.style.transform = "scale(0.9)";
                setTimeout(() => {
                    shark.style.transform = "scale(1)";
                }, 100);
            }
        }

        document.addEventListener("DOMContentLoaded", function() {
            // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
            const DB_URL = "https://tralalero-fec07-default-rtdb.firebaseio.com";
            const DEFAULT_AVATAR_URL = "https://placehold.co/64x64";
            const COIN_ICON_URL = "https://sinobu1.github.io/shark-tapper/coin_icon_small.png";
            const SHARK_DEFAULT_SKIN_URL = "ww.png";
            const SHARK_SKIN2_URL = "https://sinobu1.github.io/shark-tapper/ww3.png";
            const SHARK_SKIN3_URL = "https://sinobu1.github.io/shark-tapper/ww2.png";
            const LOCAL_STORAGE_KEY = 'sharkTapperData';
            const SAVE_INTERVAL = 5000;
            const TAP_VIBRATION_DURATION = 50; // –£–≤–µ–ª–∏—á–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–±—Ä–∞—Ü–∏–∏
            const TAP_ANIMATION_DURATION = 100;
            const TAP_EFFECT_DURATION = 600;
            const COIN_POPUP_DURATION = 1000;
            const LEADERBOARD_SIZE = 10;
            const AUTO_SAVE_INTERVAL = 30000;
            const XP_LEVEL_LIMITS = [
                0, 100, 500, 1000, 2500, 5000, 10000, 50000, 100000, 250000, 500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000, 64000000, 100000000
            ];

            let userId = null;
            let userData = {
                username: "Player",
                avatar: DEFAULT_AVATAR_URL,
                tokens: 0,
                skin: 'default',
                level: 0,
                helpers: {} // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
            };
            const profileAvatar = document.getElementById('profileAvatar');
            let lastSave = 0;
            let canVibrate = 'vibrate' in navigator;
            let tapMultiplier = 1;
            let tapUpgradeCost = 50;
            const passiveIncomeInterval = 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
            let lastPassiveIncomeTime = Date.now();

            const helpersData = {
                'tinyFish': { name: 'üêü –ú–∞–ª–µ–Ω—å–∫–∞—è —Ä—ã–±–∫–∞', description: '–ü—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –º–µ–ª–∫–∏–µ –±–ª–µ—Å—Ç—è—â–∏–µ –º–æ–Ω–µ—Ç–∫–∏.', cost: 1000, income: 1, upgradeMultiplier: 1.2 },
                'seaAnemone': { name: 'üå∏ –ú–æ—Ä—Å–∫–æ–π –∞–Ω–µ–º–æ–Ω', description: '–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤–æ–¥—É, –Ω–∞—Ö–æ–¥—è —Ä–µ–¥–∫–∏–µ –º–æ–Ω–µ—Ç—ã.', cost: 5000, income: 5, upgradeMultiplier: 1.3 },
                'hermitCrab': { name: 'ü¶Ä –ö—Ä–∞–±-–æ—Ç—à–µ–ª—å–Ω–∏–∫', description: '–°–æ–±–∏—Ä–∞–µ—Ç –º–æ–Ω–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –¥–Ω–µ.', cost: 15000, income: 15, upgradeMultiplier: 1.4 },
                'starfish': { name: '‚≠ê –ú–æ—Ä—Å–∫–∞—è –∑–≤–µ–∑–¥–∞', description: '–ï–µ —Å–≤–µ—Ç –º–∞–Ω–∏—Ç –ª—é–±–æ–ø—ã—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏.', cost: 50000, income: 50, upgradeMultiplier: 1.5 },
                'jellyfish': { name: 'üíß –ú–µ–¥—É–∑–∞', description: '–ü–ª–∞–≤–Ω–æ –ø–∞—Ä–∏—Ç, —Å–æ–±–∏—Ä–∞—è –∑–∞—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞.', cost: 150000, income: 150, upgradeMultiplier: 1.6 },
                'babyTurtle': { name: 'üê¢ –ß–µ—Ä–µ–ø–∞—à–æ–Ω–æ–∫', description: '–ù–µ —Å–ø–µ—à–∞ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞.', cost: 500000, income: 500, upgradeMultiplier: 1.7 },
                'dolphinPup': { name: 'üê¨ –î–µ–ª—å—Ñ–∏–Ω–µ–Ω–æ–∫', description: '–õ–æ–≤–∫–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–±—Ä–æ—Å–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã.', cost: 1500000, income: 1500, upgradeMultiplier: 1.8 },
                'smallOctopus': { name: 'üêô –ú–∞–ª–µ–Ω—å–∫–∏–π –æ—Å—å–º–∏–Ω–æ–≥', description: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —â—É–ø–∞–ª—å—Ü–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—ã.', cost: 5000000, income: 5000, upgradeMultiplier: 1.9 },
                'friendlySeal': { name: 'ü¶≠ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç—é–ª–µ–Ω—å', description: '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç–∫–∏.', cost: 15000000, income: 15000, upgradeMultiplier: 2.0 }
            };

            // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

            function calculateLevel(tokens) {
                for (let i = XP_LEVEL_LIMITS.length - 1; i >= 0; i--) {
                    if (tokens >= XP_LEVEL_LIMITS[i]) {
                        return i;
                    }
                }
                return 0;
            }

            function calculateTapMultiplier(tokens) {
                const max = XP_LEVEL_LIMITS.find(l => tokens < l) || 100000000;
                const level = XP_LEVEL_LIMITS.indexOf(max);
                return 1 + Math.floor(level / 5);
            }

            function updateAvatarFrameStyle(level) {
                profileAvatar.style.border = '';
                profileAvatar.style.backgroundImage = '';
                profileAvatar.style.boxShadow = '';
                profileAvatar.className = 'profile-avatar-frame';

                if (level === 0) {
                    profileAvatar.style.borderColor = getComputedStyle(document.documentElement).getPropertyValue('--accent').trim();
                } else if (level === 1) {
                    profileAvatar.style.borderColor = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
                } else if (level >= 2) {
                    profileAvatar.classList.add('level-animated-gradient-frame');
                }
            }

            function getPassiveIncome() {
                let totalIncome = 0;
                for (const helperId in userData.helpers) {
                    if (userData.helpers.hasOwnProperty(helperId) && helpersData.hasOwnProperty(helperId)) {
                        totalIncome += userData.helpers[helperId] * helpersData[helperId].income;
                    }
                }
                return totalIncome;
            }

            function displayHelpers() {
                const helpersListUI = document.getElementById('helpersListUI');
                if (!helpersListUI) return;
                helpersListUI.innerHTML = '';

                for (const helperId in helpersData) {
                    if (helpersData.hasOwnProperty(helperId)) {
                        const helper = helpersData[helperId];
                        const owned = userData.helpers[helperId] || 0;
                        const listItem = document.createElement('li');
                        listItem.className = 'helper-item';
                        listItem.innerHTML = `
                            <div class="helper-top-info">
                                <div class="helper-emoji-frame">
                                    <span>${getHelperEmoji(helperId)}</span>
                                </div>
                                <div class="helper-name-description">
                                    <div class="helper-name">${helper.name}</div>
                                    <div class="helper-description">${helper.description}</div>
                                </div>
                            </div>
                            <div class="helper-bottom-actions">
                                <button class="buy-button ${userData.tokens < helper.cost ? 'disabled' : ''}" data-helper-id="${helperId}">
                                    –ö—É–ø–∏—Ç—å (${helper.cost} <img src="${COIN_ICON_URL}" alt="Coin" style="height: 12px; vertical-align: middle;">)
                                </button>
                                <div class="helper-income">
                                    <div class="income-text">
                                        <span>${helper.income} <img src="${COIN_ICON_URL}" alt="Coin" style="height: 9px; vertical-align: middle; margin-right: 0.1rem;"></span>
                                        <span style="font-size: 0.7rem;">–≤ —Å–µ–∫.</span>
                                    </div>
                                    <div class="owned-text">–ö—É–ø–ª–µ–Ω–æ: ${owned}</div>
                                </div>
                            </div>
                        `;
                        helpersListUI.appendChild(listItem);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ö—É–ø–∏—Ç—å"
                document.querySelectorAll('.buy-button').forEach(button => {
                    button.addEventListener('click', function() {
                        const helperId = this.dataset.helperId;
                        buyHelper(helperId);
                    });
                });
            }

            function getHelperEmoji(helperId) {
                switch (helperId) {
                    case 'tinyFish': return 'üêü';
                    case 'seaAnemone': return 'üå∏';
                    case 'hermitCrab': return 'ü¶Ä';
                    case 'starfish': return '‚≠ê';
                    case 'jellyfish': return 'üíß';
                    case 'babyTurtle': return 'üê¢';
                    case 'dolphinPup': return 'üê¨';
                    case 'smallOctopus': return 'üêô';
                    case 'friendlySeal': return 'ü¶≠';
                    default: return '';
                }
            }

            function buyHelper(helperId) {
                if (!helpersData.hasOwnProperty(helperId)) return;
                const helper = helpersData[helperId];
                if (userData.tokens >= helper.cost) {
                    userData.tokens -= helper.cost;
                    userData.helpers[helperId] = (userData.helpers[helperId] || 0) + 1;
                    updateDisplay();
    highlightSelectedSkin();
                    displayHelpers(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
                    saveProgress();
                } else {
                    console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ " + helper.name);
                }
            }

            // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---

            
function highlightSelectedSkin() {
    document.querySelectorAll('.skin-option').forEach(el => el.classList.remove('selected'));
    const selected = document.querySelector(`.skin-option[data-skin="${userData.skin}"]`);
    if (selected) {
        selected.classList.add('selected');
        if (!selected.querySelector('.skin-selected-label')) {
            const label = document.createElement('span');
            label.className = 'skin-selected-label';
            label.textContent = '–í—ã–±—Ä–∞–Ω';
            selected.appendChild(label);
        }
    }
}


function init() {
                setupEventListeners();
                loadTelegram();
                initLocalStorage();
                updateDisplay();
    highlightSelectedSkin();
                showTab('home');
                displayHelpers(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setInterval(addPassiveIncome, passiveIncomeInterval); // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
            }

            function setupEventListeners() {
                const tapImage = document.getElementById('tapImage');
                tapImage.addEventListener('click', handleTap);

                const buyTapUpgradeButton = document.getElementById('buyTapUpgradeNav');
                buyTapUpgradeButton.addEventListener('click', buyTapUpgrade);

                const openHelpersModalButton = document.getElementById('openHelpersModal');
                const closeHelpersModalButton = document.getElementById('closeHelpersModal');
                const helpersModal = document.getElementById('helpersModal');

                const openSkinsModalButton = document.getElementById('openSkinsModal');
                const closeSkinsModalButton = document.getElementById('closeSkinsModal');
                const skinsModal = document.getElementById('skinsModal');

                if (openHelpersModalButton) {
                    openHelpersModalButton.addEventListener('click', () => {
                        helpersModal.style.display = "block";
                        displayHelpers(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    });
                }

                if (closeHelpersModalButton) {
                    closeHelpersModalButton.addEventListener('click', () => {
                        helpersModal.style.display = "none";
                    });
                }

                if (openSkinsModalButton) {
                    openSkinsModalButton.addEventListener('click', () => {
                        skinsModal.style.display = "block";
                    });
                }

                if (closeSkinsModalButton) {
                    closeSkinsModalButton.addEventListener('click', () => {
                        skinsModal.style.display = "none";
                    });
                }

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
                window.addEventListener('click', (event) => {
                    if (event.target === helpersModal) {
                        helpersModal.style.display = "none";
                    }
                    if (event.target === skinsModal) {
                        skinsModal.style.display = "none";
                    }
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫–∏–Ω–æ–≤ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                const skinsGallery = document.querySelectorAll('#home .shark-gallery img, #skinsModal .shark-gallery img');
                skinsGallery.forEach(img => {
                    img.addEventListener('click', function() {
                        const selectedSkin = this.dataset.skin;
                        setSkin(selectedSkin);
                        if (this.closest('#skinsModal')) {
                            skinsModal.style.display = "none"; // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∫–∏–Ω–∞, –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤ –Ω–µ–º
                        }
                        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ setSkin
                        console.log(`–°–∫–∏–Ω ${selectedSkin} –≤—ã–±—Ä–∞–Ω`); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞
                    });
                });

                const inviteFriendQuestButton = document.getElementById('inviteFriendQuest');
                const referralLinkContainer = document.getElementById('referralLinkContainer');

                if (inviteFriendQuestButton) {
                    inviteFriendQuestButton.addEventListener('click', () => {
                        if (Telegram && Telegram.WebApp) {
                            const initData = Telegram.WebApp.initDataUnsafe;
                            const userId = initData?.user?.id;
                            if (userId) {
                                const referralLink = `https://t.me/–≤–∞—à–µ_–±–æ—Ç_–∏–º—è?start=${userId}`; // –ó–∞–º–µ–Ω–∏—Ç–µ "–≤–∞—à–µ_–±–æ—Ç_–∏–º—è" –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞!
                                referralLinkContainer.innerHTML = `<p style="color: var(--primary);">–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π:</p><p><a href="${referralLink}" target="_blank">${referralLink}</a></p>`;
                                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç.
                                // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏).
                                userData.tokens += 100;
                                updateDisplay();
    highlightSelectedSkin();
                                saveProgress();
                            } else {
                                referralLinkContainer.innerHTML = '<p style="color: var(--subtext);">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</p>';
                            }
                        } else {
                            referralLinkContainer.innerHTML = '<p style="color: var(--subtext);">Telegram Web Apps –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>';
                        }
                    });
                }

                document.querySelectorAll('nav button').forEach(btn => {
                    btn.addEventListener('click', function() {
                        showTab(this.dataset.tab);
                    });
                });
            }

            // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

            function handleTap(event) {
    triggerVibration();
                feedback(); // üëà –≤–æ—Ç –æ–Ω–∞
                createTapEffect(event);
                createCoinPopup(event, tapMultiplier);
                userData.tokens += tapMultiplier;
                updateDisplay();
    highlightSelectedSkin();
                const now = Date.now();
                if (now - lastSave > SAVE_INTERVAL) {
                    saveProgress();
                    lastSave = now;
                } else {
                    saveToLocalStorage();
                }
            }

            function createTapEffect(event) {
                const effect = document.createElement('div');
                effect.className = 'tap-effect';
                effect.style.left = `${event.clientX}px`;
                effect.style.top = `${event.clientY}px`;
                document.body.appendChild(effect);

                setTimeout(() => {
                    effect.remove();
                }, TAP_EFFECT_DURATION);
            }

            function createCoinPopup(event, amount) {
                const popup = document.createElement('div');
                popup.className = 'coin-popup';
                popup.innerHTML = `<img src="${COIN_ICON_URL}" alt="Coin"> +${amount}`;
                popup.style.left = `${event.clientX}px`;
                popup.style.top = `${event.clientY - 20}px`;
                document.body.appendChild(popup);

                setTimeout(() => {
                    popup.remove();
                }, COIN_POPUP_DURATION);
            }

            // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---

            function updateDisplay() {
                const counter = document.getElementById("profileTokens");
                if (counter) counter.textContent = Math.floor(userData.tokens);

                const previousLevel = userData.level;
                const currentLevel = calculateLevel(userData.tokens);
                if (currentLevel > previousLevel) {
                    userData.level = currentLevel;
                    console.log(`–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${userData.level}`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup "Level Up!"
                const popup = document.createElement('div');
                popup.textContent = `LEVEL ${userData.level} UP! üéâ`;
                popup.style.position = 'fixed';
                popup.style.top = '50%';
                popup.style.left = '50%';
                popup.style.transform = 'translate(-50%, -50%)';
                popup.style.padding = '1rem 2rem';
                popup.style.background = 'linear-gradient(45deg, var(--primary), var(--accent))';
                popup.style.color = '#fff';
                popup.style.fontFamily = 'Rubik', sans-serif;
                popup.style.fontSize = '1.3rem';
                popup.style.borderRadius = '16px';
                popup.style.boxShadow = '0 10px 30px rgba(0,0,0,0.2)';
                popup.style.zIndex = 9999;
                popup.style.animation = 'fadeOut 2s ease-out forwards';
                document.body.appendChild(popup);
                setTimeout(() => popup.remove(), 2000);

                    updateAvatarFrameStyle(userData.level);
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                }

                const levelEl = document.getElementById("profileLevel");
                if (levelEl) levelEl.textContent = `Level: ${userData.level} | Coins: ${Math.floor(userData.tokens)}`;

                const bar = document.getElementById("xpBar");
                if (bar) {
                    const max = XP_LEVEL_LIMITS.find(l => userData.tokens < l) || 100000000;
                    const min = XP_LEVEL_LIMITS[XP_LEVEL_LIMITS.indexOf(max) - 1] || 0;
                    const percent = ((userData.tokens - min) / (max - min)) * 100;
                    bar.style.width = `${Math.min(100, Math.max(0, percent))}%`;
                }

                const tapMultiplierDisplay = document.getElementById('tapMultiplierDisplay');
                if (tapMultiplierDisplay) tapMultiplierDisplay.textContent = tapMultiplier;

                const buyTapUpgradeButtonNav = document.getElementById('buyTapUpgradeNav');
                if (buyTapUpgradeButtonNav) {
                    if (userData.tokens < tapUpgradeCost) {
                        buyTapUpgradeButtonNav.classList.add('disabled');
                    } else {
                        buyTapUpgradeButtonNav.classList.remove('disabled');
                    }
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
                const helpersListUI = document.getElementById('helpersListUI');
                if (helpersListUI) {
                    helpersListUI.querySelectorAll('.buy-button').forEach(button => {
                        const helperId = button.dataset.helperId;
                        if (userData.tokens < helpersData[helperId].cost) {
                            button.classList.add('disabled');
                        } else {
                            button.classList.remove('disabled');
                        }
                    });
                }
            }

            function showTab(tabId) {
                document.querySelectorAll('nav button').forEach(btn => {
                    btn.classList.toggle('active', btn.dataset.tab === tabId);
                });

                document.querySelectorAll('.tab-page').forEach(page => {
                    page.classList.toggle('active', page.id === tabId);
                });

                if (tabId === 'leaderboard') {
                    loadLeaderboard();
                }
            }

            // --- –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ ---
            function addPassiveIncome() {
                const now = Date.now();
                if (now - lastPassiveIncomeTime >= passiveIncomeInterval) {
                    const income = getPassiveIncome();
                    userData.tokens += income;
                    updateDisplay();
    highlightSelectedSkin();
                    lastPassiveIncomeTime = now;
                    saveToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
                }
            }

            // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---

            function saveProgress() {
                if (!userId) {
                    saveToLocalStorage();
                    return;
                }

                fetch(`${DB_URL}/users/${userId}.json`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        balance: userData.tokens,
                        first_name: userData.username,
                        photo_url: userData.avatar,
                        skin: userData.skin,
                        last_update: Date.now(),
                        tapMultiplier: tapMultiplier,
                        tapUpgradeCost: tapUpgradeCost,
                        level: userData.level,
                        helpers: userData.helpers
                    })
                })
                .then(() => saveToLocalStorage())
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
                    saveToLocalStorage();
                });
            }

            function initLocalStorage() {
                const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);
                if (savedData) {
                    try {
                        const parsed = JSON.parse(savedData);
                        userData.tokens = parsed.tokens || 0;
                        userData.skin = parsed.skin || 'default';
                        tapMultiplier = parsed.tapMultiplier || 1;
                        tapUpgradeCost = parsed.tapUpgradeCost || 50;
                        userData.level = parsed.level || 0;
                        userData.helpers = parsed.helpers || {};
                        updateDisplay();
    highlightSelectedSkin();
                        setSkin(userData.skin, true); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≥–∞–ª–µ—Ä–µ–∏
                        updateUpgradeUI();
                        updateAvatarFrameStyle(userData.level);
                        displayHelpers();
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', e);
                        userData.level = calculateLevel(userData.tokens);
                        updateDisplay();
    highlightSelectedSkin();
                        updateAvatarFrameStyle(userData.level);
                        displayHelpers();
                    }
                } else {
                    userData.level = calculateLevel(userData.tokens);
                    updateDisplay();
    highlightSelectedSkin();
                    updateUpgradeUI();
                    updateAvatarFrameStyle(userData.level);
                    displayHelpers();
                }
            }

            function saveToLocalStorage() {
                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify({
                    tokens: userData.tokens,
                    skin: userData.skin,
                    tapMultiplier: tapMultiplier,
                    tapUpgradeCost: tapUpgradeCost,
                    level: userData.level,
                    helpers: userData.helpers
                }));
            }

            function loadProgress() {
                if (!userId) return;

                fetch(`${DB_URL}/users/${userId}.json`)
                    .then(res => {
                        if (!res.ok) throw new Error('Network response was not ok');
                        return res.json();
                    })
                    .then(data => {
                        if (data) {
                            const serverTokens = data.balance || 0;
                            userData.tokens = Math.max(serverTokens, userData.tokens);
                            userData.username = data.first_name || "Player";
                            userData.avatar = data.photo_url || DEFAULT_AVATAR_URL;
                            userData.skin = data.skin || 'default';
                            tapMultiplier = data.tapMultiplier || 1;
                            tapUpgradeCost = data.tapUpgradeCost || 50;
                            userData.level = data.level || calculateLevel(userData.tokens);
                            userData.helpers = data.helpers || {};
                            updateUpgradeUI();
                            updateDisplay();
    highlightSelectedSkin();
                            document.getElementById("profileName").textContent = userData.username;
                            document.getElementById("profileAvatar").src = userData.avatar;
                            setSkin(userData.skin, true); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≥–∞–ª–µ—Ä–µ–∏
                            saveToLocalStorage();
                            updateAvatarFrameStyle(userData.level);
                            displayHelpers();
                        } else {
                            userData.level = calculateLevel(userData.tokens);
                            updateUpgradeUI();
                            updateDisplay();
    highlightSelectedSkin();
                            updateAvatarFrameStyle(userData.level);
                            displayHelpers();
                        }
                    })
                    .catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
                        userData.level = calculateLevel(userData.tokens);
                        updateUpgradeUI();
                        updateDisplay();
    highlightSelectedSkin();
                        updateAvatarFrameStyle(userData.level);
                        displayHelpers();
                    });
            }

            // --- –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ---

            function loadLeaderboard() {
                fetch(`${DB_URL}/users.json`)
                    .then(res => {
                        if (!res.ok) throw new Error('Network response was not ok');
                        return res.json();
                    })
                    .then(data => {
                        const list = document.getElementById("leaderboardList");
                        if (!data || Object.keys(data).length === 0) {
                            return list.innerHTML = '<li style="text-align:center; color: var(--subtext);">–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</li>';
                        }

                        const sorted = Object.entries(data)
                            .sort((a, b) => (b[1].balance || 0) - (a[1].balance || 0))
                            .slice(0, LEADERBOARD_SIZE);

                        renderLeaderboard(sorted);
                    })
                    .catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', err);
                        const list = document.getElementById("leaderboardList");
                        list.innerHTML = '<li style="text-align:center; color: var(--subtext);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</li>';
                    });
            }

            function renderLeaderboard(data) {
                const list = document.getElementById("leaderboardList");
                list.innerHTML = data.map(([id, user], i) => {
                    const isCurrentUser = id === userId?.toString();
                    return `
                                <li class="leaderboard-item ${isCurrentUser ? 'current-user' : ''}">
                                    <span style="font-weight: bold; color: var(--primary); width: 24px; text-align: center;">#${i + 1}</span>
                                    <img src="${user.photo_url || DEFAULT_AVATAR_URL}"
                                         style="width: 32px; height: 32px; border-radius: 50%; border: 2px solid var(--accent); object-fit: cover;">
                                    <span style="flex: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        ${user.first_name || 'Player'}
                                    </span>
                                    <span style="color: var(--subtext); font-family: 'Press Start 2P', cursive; font-size: 0.7rem;">
                                        ${user.balance || 0} üí∞
                                    </span>
                                </li>`;
                }).join("");
            }

            // --- –°–∫–∏–Ω—ã ---

            function setSkin(skin, silent = false) {
                const skins = {
                    'default': SHARK_DEFAULT_SKIN_URL,
                    'skin2': SHARK_SKIN2_URL,
                    'skin3': SHARK_SKIN3_URL
                };

                if (skins[skin]) {
                    userData.skin = skin;
                    document.getElementById('tapImage').src = skins[skin];
                    if (!silent) saveProgress();

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤ –≥–∞–ª–µ—Ä–µ–µ —Å–∫–∏–Ω–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    const galleryImages = document.querySelectorAll('#home .shark-gallery img');
                    galleryImages.forEach(img => {
                        if (img.dataset.skin === skin) {
                            img.style.border = '2px solid var(--accent)'; // –ò–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                        } else {
                            img.style.border = '2px solid var(--primary)'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
                        }
                    });
                }
            }

            // --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web Apps ---

            function loadTelegram() {
                try {
                    const tgUser = Telegram?.WebApp?.initDataUnsafe?.user;
                    if (tgUser) {
                        userId = tgUser.id?.toString();
                        userData.username = tgUser.first_name || "Player";
                        userData.avatar = tgUser.photo_url || DEFAULT_AVATAR_URL;
                        document.getElementById("profileName").textContent = userData.username;
                        document.getElementById("profileAvatar").src = userData.avatar;
                        loadProgress();
                    } else {
                        console.warn('Telegram user not available, using local mode');
                        initLocalStorage();
                        updateDisplay();
                        highlightSelectedSkin();
                        updateAvatarFrameStyle(userData.level);
                        displayHelpers();
                    }
                } catch (e) {
                    console.error('Telegram WebApp error:', e);
                    initLocalStorage();
                    updateDisplay();
                    highlightSelectedSkin();
                    updateAvatarFrameStyle(userData.level);
                    displayHelpers();
                }
            }

            // --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---

            setInterval(() => {
                if (userData.tokens > 0) {
                    saveProgress();
                }
            }, AUTO_SAVE_INTERVAL);

            // --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞–ø–∞ ---
            function buyTapUpgrade() {
                if (userData.tokens >= tapUpgradeCost) {
                    userData.tokens -= tapUpgradeCost;
                    tapMultiplier++;
                    tapUpgradeCost = Math.round(tapUpgradeCost * 1.5);
                    updateDisplay();
    highlightSelectedSkin();
                    updateUpgradeUI();
                } else {
                    console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
                }
            }

            // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —É–ª—É—á—à–µ–Ω–∏—è ---
            function updateUpgradeUI() {
                const tapUpgradeCostElementNav = document.getElementById('tapUpgradeCostNav');
                if (tapUpgradeCostElementNav) tapUpgradeCostElementNav.textContent = tapUpgradeCost;
            }

            // --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
            init();
        });